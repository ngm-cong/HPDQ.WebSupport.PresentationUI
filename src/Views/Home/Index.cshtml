@using System.Security.Claims
@{
    ViewData["Title"] = "Danh sách yêu cầu";
    var emp_id = User.FindFirst(ClaimTypes.NameIdentifier)?.Value
        ?? User.FindFirst("preferred_username")?.Value
        ?? User.FindFirst("upn")?.Value;
}
@model IEnumerable<HPDQ.WebSupport.DataEntitites.Ticket>
<h3>DANH SÁCH YÊU CẦU</h3>
<div class="contentlist" id="contentlist">
    @foreach (var model in (Model ?? new List<HPDQ.WebSupport.DataEntitites.Ticket>()))
    {
        <div class="item" tag="@(model.Id)" tagEMP_ID="@(model.EMP_ID)" tagStatus="@((byte)model.Status)">
            <div class="card-title">[@(model.CreatedOn.ToString("HH:mm dd/MM/yyyy"))] @(model.Description.Substring(0, Math.Min(model.Description.Length, 100)))</div>
            <div class="text-container">@(model.Description)<div class="corner-label @(model.Status == HPDQ.WebSupport.DataEntitites.TicketStatus.Done ? "done" : "") @(model.Status == HPDQ.WebSupport.DataEntitites.TicketStatus.Closed ? "closed" : "")">@(model.Status.GetDescription())</div></div>
        </div>
    }
</div>
<!-- Modal -->
<div class="modal fade" id="dialogModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">CHI TIẾT YÊU CẦU</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input id="modelTag" type="hidden" />
                <partial name="_NewTicket" />
            </div>
            @* <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div> *@
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="dialogModalImage" tabindex="-1" aria-labelledby="myModalLabelImage" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" style="max-width: 1000px; max-height: 600px;">
        <div class="modal-content" style="max-height: 600px; overflow-y: auto;">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabelImage">HÌNH ẢNH ĐÍNH KÈM</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
            @* <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div> *@
        </div>
    </div>
</div>
@section Styles {
    <link rel="stylesheet" href="~/css/contentlist.css" />
}
@section Scripts {
    <script src="~/js/fileinput.js"></script>
    <script src="~/js/ajaxutil.js"></script>
    <script type="text/javascript">
        function formatDateTime(input) {
            // Normalize to 3-digit milliseconds if needed
            const fixedInput = input.replace(/(\.\d{1,2})(?!\d)/, (match) => {
                return match.padEnd(4, '0'); // e.g., ".17" → ".170"
            });

            const date = new Date(fixedInput);

            if (isNaN(date)) return "Invalid date";

            const pad = n => n.toString().padStart(2, '0');

            const hours = pad(date.getHours());
            const minutes = pad(date.getMinutes());
            const day = pad(date.getDate());
            const month = pad(date.getMonth() + 1); // months are 0-based
            const year = date.getFullYear();

            return `${hours}:${minutes} ${day}/${month}/${year}`;
        }
        $(function () {
            $('#contentlist .item').click(function () {
                if ($(this).attr('tagEMP_ID') != '@emp_id' && $(this).attr('tagStatus') == '1') $('#lblcomplete').show();
                else $('#lblcomplete').hide();
                if ($(this).attr('tagEMP_ID') == '@emp_id' && $(this).attr('tagStatus') == '2') $('#lblclose').show();
                else $('#lblclose').hide();
                function loadImages() {
                    $('.content.contentlist div.item').each(function(index, element) {
                        var className = $(`.content.contentlist div.item:eq(${index}) div.corner-label`).attr('class');
                        var bodydata;
                        if (index == 0) {
                            bodydata = {
                                ticketId: $(this).attr('tagId')
                            };
                        } else {
                            bodydata = {
                                commentId: $(this).attr('tagId')
                            };
                        }
                        postData('@WebSupport.Utilities.Globals.APIUrl/Attachments/Load', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                            if (response.data.length > 0) {
                                $(`.content.contentlist div.item:eq(${index}) div.corner-label`).attr('class', className.replace(' disabled', ''));
                                var itemcontainer = $('<div class="itemcontainer"></div>');
                                $(`.content.contentlist div.item:eq(${index})`).append(itemcontainer);
                                $.each(response.data, function(index, value) {
                                    if (!/\.jpe?g$|\.png$/i.test(value.fileName)) {
                                        console.log('value.fileName: ', value.fileName);
                                        return true;
                                    }
                                    $.ajax({
                                        url: `@WebSupport.Utilities.Globals.APIUrl/Upload/Get/${value.fileName}`,
                                        method: 'GET',
                                        headers: {
                                            'X-API-KEY': '@WebSupport.Utilities.Globals.APIKey'
                                        },
                                        dataType: 'json',
                                        success: function(response) {
                                            console.log('Kết quả:', response, $(`.content.contentlist div.item:eq(${index}) div.itemcontainer`).outerHTML);
                                            itemcontainer.append(`<img src="data:image/png;base64,${response.data}" />`);
                                        },
                                        error: function(xhr, status, error) {
                                            console.error('Lỗi:', error);
                                        }
                                    });
                                });
                            }
                        });
                    });
                }
                function loadComments(bodydata) {
                    postData('@WebSupport.Utilities.Globals.APIUrl/Comments/Load', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                        if (response.errorCode != 0)
                        {
                            window.location.href = '/Home/Index';
                            return;
                        }
                        $.each(response.data, function(index, value) {
                            var className = 'item';
                            if (value.emp_id != '@emp_id') {
                                className = 'item reply';
                            }
                            $('.content.contentlist').append(`<div class="${className}" tagId="${value.id}">
                                <div class="card-title">[${formatDateTime(value.createdOn)}] ${value.emp_id}</div>
                                <div class="text-container">${value.commentDesc}<div class="corner-label disabled" onclick="showImagePopup(this, false)">Đính kèm</div></div>
                            </div>`);
                        });
                        loadImages();
                        var dialogModal = new bootstrap.Modal(document.getElementById('dialogModal'));
                        dialogModal.show();
                    });
                }
                var bodydata = {
                    id: $(this).attr('tag')
                };
                postData('@WebSupport.Utilities.Globals.APIUrl/Tickets/Load', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                    if (response.errorCode != 0)
                    {
                        window.location.href = '/Home/Index';
                        return;
                    }
                    $('.content.contentlist').html('');
                    var className = 'item';
                    if (response.data[0].emp_id != '@emp_id') {
                        className = 'item reply';
                    }
                    $('.content.contentlist').append(`<div class="${className}" tagId="${response.data[0].id}">
                        <div class="card-title">[${formatDateTime(response.data[0].createdOn)}] ${response.data[0].emp_id}</div>
                        <div class="text-container">${response.data[0].description}<div class="corner-label disabled" onclick="showImagePopup(this, true)">Đính kèm</div></div>
                    </div>`);
                    $('#modelTag').val(bodydata.id);

                    bodydata = {
                        ticketId: $('#modelTag').val()
                    };
                    loadComments(bodydata);
                });
            });
            $('#btnconfirm').click(function () {
                var uploadCompleted = false;
                var files;

                var uploadVal = uploadFileInputs('@WebSupport.Utilities.Globals.APIUrl/Upload/Upload', '@WebSupport.Utilities.Globals.APIKey', uploadCompleted, files);
                uploadCompleted = uploadVal.uploadCompleted;
                files = uploadVal.files;
                if (uploadCompleted == false) {
                    alert(uploadVal.message);
                    return;
                }

                if (uploadCompleted == false) return;

                var bodydata = {
                    emp_id: '@emp_id',
                    commentDesc: $('#txtdescription').val(),
                    ticketId: $('#modelTag').val(),
                    files: files
                };
                postData('@WebSupport.Utilities.Globals.APIUrl/Comments/Create', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                    if (response.errorCode != 0)
                    {
                        alert(response.message);
                        return;
                    }
                    var className = 'item';
                    if (response.data.emp_id != '@emp_id') {
                        className = 'item reply';
                    }
                    $('.content.contentlist').append(`<div class="${className}">
                        <div class="card-title">[@DateTime.Now.ToString("HH:mm dd/MM/yyyy")] ${response.data.emp_id}</div>
                        <div class="text-container">${response.data.commentDesc}<div class="corner-label">Đính kèm</div></div>
                    </div>`);

                    formData = new FormData();
                    $('#divattachment').html(formDataFileLength());
                });
            });
            initFileInput();
            if ('@ViewBag.Type' == '1') {
                $('#lblaccept').on('click', function () {
                    var bodydata = {
                        id: $('#modelTag').val(),
                        status: 1,
                        progressBy_EMP_ID: '@emp_id',
                    };
                    postData('@WebSupport.Utilities.Globals.APIUrl/Tickets/Update', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                        if (response.errorCode != 0)
                        {
                            alert(response.message);
                            return;
                        }
                        location.reload();
                    });
                });
                $('#lblaccept').show();
            }
            $('#lblcomplete').on('click', function () {
                var bodydata = {
                    id: $('#modelTag').val(),
                    status: 2,
                };
                postData('@WebSupport.Utilities.Globals.APIUrl/Tickets/Update', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                    if (response.errorCode != 0)
                    {
                        alert(response.message);
                        return;
                    }
                    location.reload();
                });
            });
            $('#lblclose').on('click', function () {
                var bodydata = {
                    id: $('#modelTag').val(),
                    status: 3,
                };
                postData('@WebSupport.Utilities.Globals.APIUrl/Tickets/Update', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                    if (response.errorCode != 0)
                    {
                        alert(response.message);
                        return;
                    }
                    location.reload();
                });
            });
            document.getElementById('dialogModalImage').addEventListener('shown.bs.modal', function () {
                this.focus();
            });
        });
        function showImagePopup(element, isTicket) {
            var elclass = $(element).attr('class');
            if (elclass.includes('disabled')) return;
            $('#dialogModalImage div.modal-body').html('');
            var bodydata;
            if (isTicket) {
                bodydata = {
                    ticketId: $(element.parentElement.parentElement).attr('tagid')
                };
            } else {
                bodydata = {
                    commentId: $(element.parentElement.parentElement).attr('tagid')
                };
            }
            postData('@WebSupport.Utilities.Globals.APIUrl/Attachments/Load', '@WebSupport.Utilities.Globals.APIKey', bodydata, function(response) {
                console.log(response);
                if (response.data.length > 0) {
                    $.each(response.data, function(index, value) {
                        if (!/\.jpe?g$|\.png$/i.test(value.fileName)) {
                            console.log('value.fileName: ', value.fileName);
                            return true;
                        }
                        $.ajax({
                            url: `@WebSupport.Utilities.Globals.APIUrl/Upload/Get/${value.fileName}`,
                            method: 'GET',
                            headers: {
                                'X-API-KEY': '@WebSupport.Utilities.Globals.APIKey'
                            },
                            dataType: 'json',
                            success: function(response) {
                                // console.log('Kết quả:', response.data);
                                $('#dialogModalImage div.modal-body').append(`<div><img src="data:image/png;base64,${response.data}" /></div>`);
                                $('#dialogModalImage').focus();
                            },
                            error: function(xhr, status, error) {
                                console.error('Lỗi:', error);
                            }
                        });
                    });
                }
            });
            var dialogModal = new bootstrap.Modal(document.getElementById('dialogModalImage'), { backdrop: true, keyboard: true });
            dialogModal.show();
        }
    </script>
}