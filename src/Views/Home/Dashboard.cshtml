@{
    ViewData["Title"] = "Dashboard";
}
<script src="~/js/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<div id="chartNavbar" class="navbar navbar-expand-lg navbar-light bg-light mb-4 p-3 rounded shadow-sm">
    <div class="container-fluid d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center">
            <button id="collapseToggle" class="btn btn-sm btn-light border me-3">
                <i id="collapseIcon" class="bi bi-chevron-up"></i>
            </button>
            <span class="navbar-brand mb-0 h1 m-0">
                <i class="bi bi-graph-up-arrow me-2"></i>Bảng điều khiển
            </span>
        </div>

        <div id="chartNavbarContent" class="d-flex flex-wrap gap-2">
            <button class="btn btn-outline-success d-flex align-items-center showChart active" tag="currentStatus">
                <i class="bi bi-list-check me-2"></i>
                <span>Số lượng yêu cầu hiện có</span>
            </button>
            <button class="btn btn-outline-primary d-flex align-items-center showChart" tag="monthlyByType">
                <i class="bi bi-bar-chart-line-fill me-2"></i>
                <span>Số lượng yêu cầu theo loại</span>
            </button>
            <button class="btn btn-outline-info d-flex align-items-center showChart" tag="processingTime">
                <i class="bi bi-clock-history me-2"></i>
                <span>Quản lý thời gian xử lý</span>
            </button>
            <button class="btn btn-outline-primary d-flex align-items-center showChart" tag="summary">
                <i class="bi bi-bar-chart-line-fill me-2"></i>
                <span>Tổng quan</span>
            </button>
        </div>
    </div>
</div>

<div class="row mb-4" style="display: none;">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <label for="monthSelect" class="me-2">Chọn tháng:</label>
                    <select id="monthSelect" class="form-select me-3" style="width: auto;">
                        <option value="1">Tháng 1</option>
                        <option value="2">Tháng 2</option>
                        <option value="3">Tháng 3</option>
                        <option value="4">Tháng 4</option>
                        <option value="5">Tháng 5</option>
                        <option value="6">Tháng 6</option>
                        <option value="7">Tháng 7</option>
                        <option value="8">Tháng 8</option>
                        <option value="9">Tháng 9</option>
                        <option value="10">Tháng 10</option>
                        <option value="11">Tháng 11</option>
                        <option value="12">Tháng 12</option>
                    </select>
                    <label for="yearSelect" class="me-2">Chọn năm:</label>
                    <select id="yearSelect" class="form-select" style="width: auto;">
                    </select>
                    <button id="applyFilter" class="btn btn-primary ms-3">
                        <i class="bi bi-check-circle me-1"></i> Áp dụng
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body d-flex justify-content-end">
                <div id="currentFilter" class="me-3 my-auto">
                    <span class="fw-bold">Đang hiển thị dữ liệu: </span>
                    <span id="currentMonthYear" class="text-primary">Tháng @System.DateTime.Now.Month/@System.DateTime.Now.Year</span>
                </div>
                <button id="refreshData" class="btn btn-outline-secondary d-flex align-items-center">
                    <i class="bi bi-arrow-clockwise me-2"></i><span>Làm mới</span>
                </button>
            </div>
        </div>
    </div>
</div>
<div class="chart-container">
    <div id="monthlyByTypeChart" class="chart-item d-none">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">SỐ LƯỢNG YÊU CẦU THEO LOẠI</h5>
            </div>
            <div class="card-body">
                <canvas id="monthlyByTypeCanvas" class="rptcanvas"></canvas>
            </div>
        </div>
    </div>
    <div id="currentStatusChart" class="chart-item">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">SỐ LƯỢNG YÊU CẦU HIỆN CÓ THEO TRẠNG THÁI</h5>
            </div>
            <div class="card-body">
                <canvas id="currentStatusCanvas" class="rptcanvas"></canvas>
            </div>
        </div>
    </div>
    <div id="processingTimeChart" class="chart-item">
        <div class="card shadow-sm">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">THỜI GIAN XỬ LÝ TRUNG BÌNH (GIỜ)</h5>
            </div>
            <div class="card-body">
                <canvas id="processingTimeCanvas" class="rptcanvas"></canvas>
            </div>
        </div>
    </div>
    <div id="summaryChart" class="chart-item">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">TỔNG QUAN</h5>
            </div>
            <div class="card-body" style="display: flex; flex-direction: column; gap: 10px;">
                <div style="display: flex; gap: 10px; height: 50%">
                    <div style="flex: 1;"><canvas id="summaryMonthlyByTypeCanvas" class="rptcanvas"></canvas></div>
                    <div style="flex: 1;"><canvas id="summaryMonthlyByStatusCanvas" class="rptcanvas"></canvas></div>
                </div>
                <div style="display: flex; gap: 10px; height: 50%">
                    <div style="flex: 1;"><canvas id="summaryUnFinishedCanvas" class="rptcanvas"></canvas></div>
                    <div style="flex: 1;"><canvas id="summaryDailyByTypeCanvas" class="rptcanvas"></canvas></div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Styles {
    <style>
        .chart-container {
            min-height: 400px;
            height: calc(100vh - 230px);
        }

        .chart-item {
            transition: all 0.3s ease;
            width: 100%;
            height: 100%;
        }

            .chart-item .card.shadow-sm {
                width: 100%;
                height: 100%;
            }

                .chart-item .card.shadow-sm .card-body {
                    width: 100%;
                    height: 92%;
                }

                    .chart-item .card.shadow-sm .card-body table {
                        margin: 0;
                        padding: 0;
                    }

        .btn:not(#toggleSidebar) {
            border-radius: 20px;
            padding: 8px 16px;
            font-weight: 500;
            transition: all 0.2s;
        }

            .btn:not(#toggleSidebar):hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

            .btn:not(#toggleSidebar).active {
                background-color: var(--bs-primary);
                color: white;
            }

        .btn-outline-success.active {
            background-color: var(--bs-success);
        }

        .btn-outline-info.active {
            background-color: var(--bs-info);
        }

        .rptcanvas {
            width: 100%;
        }

            #chartNavbar.compact {
                max-height: 46px;
                transition: max-width 0.3s ease;
            }

            #chartNavbar {
                transition: max-width 0.3s ease;
            }
    </style>
}
@section Scripts {
    <script type="text/javascript">
        // Đăng ký plugin
        Chart.register(ChartDataLabels);

        let currentChart = 'summary';
        let charts = {};
        let selectedMonth = parseInt('@System.DateTime.Now.Month');
        let selectedYear = parseInt('@System.DateTime.Now.Year');
        function showChart(chartType, event) {
            document.querySelectorAll('.chart-item').forEach(item => {
                item.classList.add('d-none');
            });
            document.getElementById(chartType + 'Chart').classList.remove('d-none');
            document.querySelectorAll('#chartNavbar .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.closest('button').classList.add('active');
            currentChart = chartType;
            if (!charts[chartType]) {
                createChart(chartType);
            }
        }
        function createChart(chartType) {
            switch (chartType) {
                case 'monthlyByType':
                    createMonthlyByTypeChart();
                    break;
                case 'currentStatus':
                    createCurrentStatusChart();
                    break;
                case 'processingTime':
                    createProcessingTimeChart();
                    break;
                case 'summary':
                    createSummaryChart();
                    break;
            }
        }
        function createMonthlyByTypeChart() {
            const ctx = document.getElementById('monthlyByTypeCanvas').getContext('2d');
            showLoadingOnChart(ctx)

            $.ajax({
                url: '@Url.Action("DashboardViewData", "Home", new { rptType = 0 })',
                method: 'GET',
                data: {
                    month: selectedMonth,
                    year: selectedYear
                },
                headers: {
                    'X-API-KEY': '@HPDQ.WebSupport.Utilities.Globals.APIKey'
                },
                dataType: 'json',
                success: function(response) {
                    // Xóa canvas trước khi vẽ lại
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

                    const data = response.data || {
                        labels: ['Phần cứng', 'Phần mềm', 'Mạng', 'Bảo mật', 'Khác'],
                        datasets: [{
                            label: 'Số lượng yêu cầu',
                            data: [12, 19, 8, 5, 7],
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(255, 206, 86, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(153, 102, 255, 0.7)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)'
                            ],
                            borderWidth: 1
                        }]
                    };

                    if (charts.monthlyByType) {
                        charts.monthlyByType.destroy();
                    }

                    // Đảm bảo canvas có đúng kích thước trước khi tạo biểu đồ
                    const canvas = document.getElementById('monthlyByTypeCanvas');
                    canvas.style.width = '100%';
                    canvas.style.height = '500px';

                    charts.monthlyByType = new Chart(ctx, {
                        type: 'bar',
                        data: data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: `SỐ LƯỢNG YÊU CẦU THEO LOẠI - Tháng ${selectedMonth}/${selectedYear}`
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return `Số lượng: ${context.raw}`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        precision: 0
                                    }
                                }
                            }
                        }
                    });
                },
                error: function(xhr, status, error) {
                    showErrorOnChart(ctx);
                }
            });
        }
        function createCurrentStatusChart() {
            const ctx = document.getElementById('currentStatusCanvas').getContext('2d');
            showLoadingOnChart(ctx);

            $.ajax({
                url: '@Url.Action("DashboardViewData", "Home", new { rptType = 1 })',
                method: 'GET',
                data: {
                    month: selectedMonth,
                    year: selectedYear
                },
                headers: {
                    'X-API-KEY': '@HPDQ.WebSupport.Utilities.Globals.APIKey'
                },
                dataType: 'json',
                success: function(response) {
                    const data = response.data || {
                        labels: ['Mới tạo', 'Đang xử lý', 'Hoàn thành', 'Đã đóng'],
                        datasets: [{
                            label: 'Số lượng yêu cầu',
                            data: [10, 15, 8, 5],
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(255, 159, 64, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(54, 162, 235, 0.7)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(255, 159, 64, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(54, 162, 235, 1)'
                            ],
                            borderWidth: 1
                        }]
                    };
                    createCurrentStatusChartOnElementWithData(ctx, 'currentStatusCanvas', data);
                },
                error: function(xhr, status, error) {
                    showErrorOnChart(ctx);
                }
            });
        }
        function createCurrentStatusChartOnElementWithData(ctx, chartId, data, title) {
            if (!title || title == '') {
                title = `SỐ LƯỢNG YÊU CẦU THEO TRẠNG THÁI - THÁNG ${selectedMonth}/${selectedYear}`;
            }

            // Xóa canvas trước khi vẽ lại
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

            if (charts[chartId]) {
                charts[chartId].destroy();
            }

            charts[chartId] = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: {
                    indexAxis: 'y', // Thay đổi thành cột ngang
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: title
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Số lượng: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }
        function showLoadingOnChart(ctx) {
            // Hiển thị loading trên canvas
            ctx.font = '16px Arial';
            ctx.fillStyle = '#666';
            ctx.textAlign = 'center';
            ctx.fillText('Đang tải dữ liệu...', ctx.canvas.width / 2, ctx.canvas.height / 2);
        }
        function showErrorOnChart(ctx) {
            console.error('Lỗi khi tải dữ liệu:', error);
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx.font = '16px Arial';
            ctx.fillStyle = '#f00';
            ctx.textAlign = 'center';
            ctx.fillText('Không thể tải dữ liệu. Vui lòng thử lại sau.', ctx.canvas.width / 2, ctx.canvas.height / 2);
            showToast('Không thể tải dữ liệu. Vui lòng thử lại sau.');
        }
        function createProcessingTimeChart() {
            const ctx = document.getElementById('processingTimeCanvas').getContext('2d');
            showLoadingOnChart(ctx);

            $.ajax({
                url: '@Url.Action("DashboardViewData", "Home", new { rptType = 2 })',
                method: 'GET',
                data: {
                    month: selectedMonth,
                    year: selectedYear
                },
                headers: {
                    'X-API-KEY': '@HPDQ.WebSupport.Utilities.Globals.APIKey'
                },
                dataType: 'json',
                success: function(response) {
                    // Xóa canvas trước khi vẽ lại
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

                    const data = response.data || {
                        labels: ['Tuần 1', 'Tuần 2', 'Tuần 3', 'Tuần 4'],
                        datasets: [
                            {
                                label: 'Thời gian xử lý trung bình',
                                data: [3.2, 2.8, 4.1, 3.5],
                                borderColor: 'rgba(54, 162, 235, 1)',
                                backgroundColor: 'rgba(54, 162, 235, 0.1)',
                                borderWidth: 2,
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Thời gian xử lý tối đa',
                                data: [5.5, 4.8, 6.2, 5.9],
                                borderColor: 'rgba(255, 99, 132, 1)',
                                backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                borderWidth: 2,
                                fill: true,
                                tension: 0.4
                            }
                        ]
                    };

                    if (charts.processingTime) {
                        charts.processingTime.destroy();
                    }

                    // Đảm bảo canvas có đúng kích thước trước khi tạo biểu đồ
                    const canvas = document.getElementById('processingTimeCanvas');
                    canvas.style.width = '100%';
                    canvas.style.height = '500px';

                    charts.processingTime = new Chart(ctx, {
                        type: 'line',
                        data: data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'top'
                                },
                                title: {
                                    display: true,
                                    text: `THỜI GIAN XỬ LÝ TRUNG BÌNH (GIỜ) - Tháng ${selectedMonth}/${selectedYear}`
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return `${context.dataset.label}: ${context.raw} giờ`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Giờ'
                                    }
                                }
                            }
                        }
                    });
                },
                error: function(xhr, status, error) {
                    showErrorOnChart(ctx);
                }
            });
        }
        function createSummaryChart() {
            const ctxRpt0 = document.getElementById('summaryMonthlyByStatusCanvas').getContext('2d');
            const ctx = document.getElementById('summaryMonthlyByTypeCanvas').getContext('2d');
            const ctxRpt2 = document.getElementById('summaryUnFinishedCanvas').getContext('2d');
            const ctxRpt3 = document.getElementById('summaryDailyByTypeCanvas').getContext('2d');
            showLoadingOnChart(ctxRpt0);
            showLoadingOnChart(ctx);
            showLoadingOnChart(ctxRpt2);
            showLoadingOnChart(ctxRpt3);

            $.ajax({
                url: '@Url.Action("DashboardViewData", "Home", new { rptType = 3 })',
                method: 'GET',
                data: {
                    month: selectedMonth,
                    year: selectedYear
                },
                headers: {
                    'X-API-KEY': '@HPDQ.WebSupport.Utilities.Globals.APIKey'
                },
                dataType: 'json',
                success: function(response) {
                    // Xóa canvas trước khi vẽ lại
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

                    const data = response.data[1] || {
                        labels: ['Phần cứng', 'Phần mềm', 'Mạng', 'Bảo mật', 'Khác'],
                        datasets: [{
                            label: 'Số lượng yêu cầu',
                            data: [12, 19, 8, 5, 7],
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(255, 206, 86, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(153, 102, 255, 0.7)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)'
                            ],
                            borderWidth: 1
                        }]
                    };

                    if (charts.summaryMonthlyByType) {
                        charts.summaryMonthlyByType.destroy();
                    }

                    charts.summaryMonthlyByType = new Chart(ctx, {
                        type: 'doughnut',
                        data: data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true, // Đặt 'display' là 'true' để hiển thị mô tả
                                    position: 'bottom', // Có thể đặt 'top', 'bottom', 'left', 'right'
                                    labels: {
                                      // Hàm này sẽ tạo ra các mục legend
                                      generateLabels: (chart) => {
                                        const datasets = chart.data.datasets;
                                        return datasets[0].data.map((data, i) => ({
                                          text: chart.data.labels[i] + ': ' + data, // Thêm số lượng vào nhãn
                                          fillStyle: datasets[0].backgroundColor[i]
                                        }));
                                      }
                                    }
                                },
                                title: {
                                    display: true,
                                    text: `SỐ LƯỢNG YÊU CẦU THEO TÌNH TRẠNG - THÁNG ${selectedMonth}/${selectedYear}`
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed !== null) {
                                                const total = context.chart.data.datasets[0].data.reduce((sum, value) => sum + value, 0);
                                                const value = context.parsed;
                                                const percentage = ((value / total) * 100).toFixed(2) + '%';
                                                label += percentage;
                                            }
                                            return label;
                                        }
                                    }
                                },
                                // Cấu hình plugin datalabels
                                datalabels: {
                                    formatter: (value, context) => {
                                        const total = context.chart.data.datasets[0].data.reduce((sum, val) => sum + val, 0);
                                        const percentage = ((value / total) * 100).toFixed(2) + '%';
                                        return percentage;
                                    },
                                    color: '#000' // Màu chữ
                                }
                            },
                            scales: {
                                y: {
                                    // ...
                                    display: false // Ẩn trục y nếu bạn muốn code gọn hơn
                                }
                            }
                        }
                    });

                    // Biểu bồ ticket chưa được xử trí theo loại
                    ctxRpt2.clearRect(0, 0, ctxRpt2.canvas.width, ctxRpt2.canvas.height); // Xóa canvas trước khi vẽ lại

                    const data4 = response.data[3];

                    if (charts.summaryUnFinishedCanvas) {
                        charts.summaryUnFinishedCanvas.destroy();
                    }

                    charts.summaryUnFinishedCanvas = new Chart(ctxRpt2, {
                        type: 'doughnut',
                        data: data4,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    // Đặt 'display' là 'true' để hiển thị mô tả
                                    display: true,
                                    position: 'bottom', // Có thể đặt 'top', 'bottom', 'left', 'right'
                                    labels: {
                                      // Hàm này sẽ tạo ra các mục legend
                                      generateLabels: (chart) => {
                                        const datasets = chart.data.datasets;
                                        return datasets[0].data.map((data, i) => ({
                                          text: chart.data.labels[i] + ': ' + data, // Thêm số lượng vào nhãn
                                          fillStyle: datasets[0].backgroundColor[i]
                                        }));
                                      }
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'SỐ LƯỢNG YÊU CẦU CHƯA ĐƯỢC XỬ TRÍ THEO LOẠI'
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed !== null) {
                                                const total = context.chart.data.datasets[0].data.reduce((sum, value) => sum + value, 0);
                                                const value = context.parsed;
                                                const percentage = ((value / total) * 100).toFixed(2) + '%';
                                                label += percentage;
                                            }
                                            return label;
                                        }
                                    }
                                },
                                // Cấu hình plugin datalabels
                                datalabels: {
                                    formatter: (value, context) => {
                                        const total = context.chart.data.datasets[0].data.reduce((sum, val) => sum + val, 0);
                                        const percentage = ((value / total) * 100).toFixed(2) + '%';
                                        return percentage;
                                    },
                                    color: '#000' // Màu chữ
                                }
                            },
                            scales: {
                                y: {
                                    // ...
                                    display: false // Ẩn trục y nếu bạn muốn code gọn hơn
                                }
                            }
                        }
                    });
                    // Biểu bồ ticket chưa được xử trí theo loại

                    const data0 = response.data[0];
                    createCurrentStatusChartOnElementWithData(ctxRpt0, 'summaryMonthlyByStatusCanvas', data0, `SỐ LƯỢNG YÊU CẦU THEO LOẠI - THÁNG ${selectedMonth}/${selectedYear}`);

                    // Số lượng yêu cầu phát sinh theo ngày
                    const data3 = response.data[2];

                    ctxRpt3.clearRect(0, 0, ctxRpt3.canvas.width, ctxRpt3.canvas.height); // Xóa canvas trước khi vẽ lại

                    if (charts.summaryDailyByTypeCanvas) {
                        charts.summaryDailyByTypeCanvas.destroy();
                    }

                    const canvas = document.getElementById('summaryDailyByTypeCanvas'); // Đảm bảo canvas có đúng kích thước trước khi tạo biểu đồ

                    charts.summaryDailyByTypeCanvas = new Chart(ctxRpt3, {
                        type: 'line',
                        data: data3,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true
                                },
                                title: {
                                    display: true,
                                    text: `SỐ LƯỢNG YÊU CẦU PHÁT SINH THEO NGÀY - THÁNG ${selectedMonth}/${selectedYear}`
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return `Số lượng: ${context.raw}`;
                                        }
                                    }
                                }
                                , datalabels: {
                                    display: (context) => {
                                        // Trả về false nếu giá trị bằng 0
                                        return context.dataset.data[context.dataIndex] > 0;
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    ticks: {
                                        precision: 0
                                    }
                                }
                            }
                        }
                    });
                    // Số lượng yêu cầu phát sinh theo ngày
                },
                error: function(xhr, status, error) {
                    showErrorOnChart(ctxRpt0);
                    showErrorOnChart(ctx);
                    showErrorOnChart(ctxRpt2);
                    showErrorOnChart(ctxRpt3);
                }
            });
        }
        function refreshData() {
            // Hiển thị busy indicator
            document.getElementById('busyindicator').style.display = 'block';

            // Hủy biểu đồ hiện tại nếu có
            if (charts[currentChart]) {
                charts[currentChart].destroy();
                delete charts[currentChart];
            }

            // Tạo lại biểu đồ với dữ liệu mới
            createChart(currentChart);

            // Ẩn busy indicator sau một khoảng thời gian đủ để biểu đồ tải
            setTimeout(() => {
                document.getElementById('busyindicator').style.display = 'none';
                showToast('Dữ liệu đã được cập nhật!');
            }, 1500); // Tăng thời gian chờ để đảm bảo biểu đồ tải xong
        }

        function applyFilter() {
            selectedMonth = parseInt(document.getElementById('monthSelect').value);
            selectedYear = parseInt(document.getElementById('yearSelect').value);

            // Cập nhật hiển thị tháng/năm hiện tại
            document.getElementById('currentMonthYear').textContent = `Tháng ${selectedMonth}/${selectedYear}`;

            // Vô hiệu hóa nút áp dụng để tránh nhấn nhiều lần
            const applyButton = document.getElementById('applyFilter');
            applyButton.disabled = true;

            // Làm mới dữ liệu
            refreshData();

            // Kích hoạt lại nút sau khi dữ liệu được tải
            setTimeout(() => {
                applyButton.disabled = false;
            }, 1500);
        }
        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'position-fixed bottom-0 end-0 p-3';
            toast.style.zIndex = '5';
            toast.innerHTML = `
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">Thông báo</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
        function setActiveChart(chartName) {
            // Hiển thị biểu đồ currentStatus mặc định
            document.querySelectorAll('.chart-item').forEach(item => {
                item.classList.add('d-none');
            });
            document.getElementById(`${chartName}Chart`).classList.remove('d-none');
            // Đảm bảo nút currentStatus là active
            document.querySelectorAll('#chartNavbar .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`#chartNavbar button[tag="${chartName}"]`).classList.add('active');
            // Tạo biểu đồ mặc định
            createChart(chartName);
        }
        $(document).ready(function() {
            // Khởi tạo năm hiện tại và 5 năm trước đó
            const currentYear = new Date().getFullYear();
            const yearSelect = document.getElementById('yearSelect');
            for (let year = currentYear; year >= currentYear - 3; year--) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            }
            // Đặt giá trị mặc định
            document.getElementById('monthSelect').value = selectedMonth;
            document.getElementById('yearSelect').value = selectedYear;

            // Đảm bảo nút currentStatus là active
            setActiveChart('summary');

            // Gắn sự kiện cho nút áp dụng
            document.getElementById('applyFilter').addEventListener('click', applyFilter);

            // Gắn sự kiện cho nút làm mới
            document.getElementById('refreshData').addEventListener('click', refreshData);

            try {
                // Tạo một kết nối tới Hub
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("@HPDQ.WebSupport.Utilities.Globals.SignalRUrl/signalrhub", {
                        headers: {
                            "X-API-KEY": '@HPDQ.WebSupport.Utilities.Globals.APIKey'
                        }
                    })
                    .build();
                // Lắng nghe phương thức "ReceiveMessage" từ server
                connection.on("ReceiveMessage", (user, message) => {
                    // Xử lý dữ liệu nhận được, ví dụ: hiển thị lên trang
                    // const li = document.createElement("li");
                    // li.textContent = `${user}: ${message}`;
                    // document.getElementById("messagesList").appendChild(li);
                    if (currentChart == 'summary') {
                        createSummaryChart();
                    }
                });
                // Bắt đầu kết nối
                connection.start()
                    .then(() => {
                    })
                    .catch(err => {
                        // console.log('Lỗi kết nối SignalR');
                        // console.error(err);
                        console.clear();
                    });
            } catch (e) {
                // console.log('Lỗi kết nối SignalR');
            }

            // Click các tab header
            $('button.showChart').on('click', (event) => {
                showChart($(event.currentTarget).attr('tag'), event);
            });

           $("#collapseToggle").click(function () {
                $("#chartNavbar").toggleClass("compact");
                $("#chartNavbarContent").toggleClass("d-none");
                $("#collapseIcon").toggleClass("bi-chevron-up bi-chevron-down");
           });
        });
    </script>
}